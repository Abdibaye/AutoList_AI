// datasource + generator

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MEMBER
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  image           String?
  role            Role              @default(USER)
  workspaces      WorkspaceMember[] @relation("MemberOfWorkspace")
  ownedWorkspaces Workspace[]       @relation("WorkspaceOwner")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  emailVerified   Boolean
  sessions        Session[]
  accounts        Account[]

  @@map("user")
  Listing Listing[]
}

model Workspace {
  id        String            @id @default(cuid())
  name      String
  slug      String            @unique
  ownerId   String
  owner     User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members   WorkspaceMember[] @relation("MemberOfWorkspace")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  user        User      @relation("MemberOfWorkspace", fields: [userId], references: [id])
  userId      String
  workspace   Workspace @relation("MemberOfWorkspace", fields: [workspaceId], references: [id])
  workspaceId String
  role        Role      @default(MEMBER)
  joinedAt    DateTime  @default(now())

  @@unique([userId, workspaceId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Listing {
  id          String           @id @default(uuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  title       String
  price       Int
  location    String
  bedrooms    Int
  bathrooms   Int
  features    String
  tone        String
  posts       GeneratedPost[]
  createdAt   DateTime         @default(now())
}

model GeneratedPost {
  id         String   @id @default(uuid())
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])
  platform   String   // e.g. Instagram, Facebook, Twitter, LinkedIn
  content    String
  createdAt  DateTime @default(now())
}